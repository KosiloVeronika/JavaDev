package com.epam.multithreading.entity;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Random;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;


public class Reader extends Thread {
	
	private int readerID;
	private Library lib;
	private Lock lock = new ReentrantLock();
	private ArrayList<Book> bookList;
	private Integer[] books;
	
	public Reader(Library lib, int readerID) {
		this.lib = lib;
		this.readerID =  readerID;
		bookList = new ArrayList<Book>();
	}
	
	
	@Override
	public void run() {
		System.out.println("Читатель " + readerID + "пришёл в библиотеку");
		Random random = new Random();
		HashSet<Integer> bookID = new HashSet<Integer>();
		int bookCount = new Random().nextInt(5);
		if (bookCount > 0) {
			for(int k = 0; k < bookCount; k++) {
				bookID.add(random.nextInt(lib.getLibrary().size()));
			}
		}
		books = new Integer[bookID.size()];
		books = bookID.toArray(books);
		for(int i = 1; i < books.length; i++) {
			if (lib.getLibrary().get(books[i])) {
				lock.lock();
				bookList.add(lib.bookList.get(books[i]));
				System.out.println("Читатель " + readerID + " взял книгу "+ lib.bookList.get(books[i]).getName());
				lib.getLibrary().put(books[i], false);
				lock.unlock();
			}
		}
		if (bookList != null) {
			try {
				for(Book b:bookList) {
						if(!(b.isCanTake())) {
							sleep(random.nextInt(70));
							if(random.nextBoolean()) {
								returnBook(b, "в читальный зал ");
								bookList.remove(b);
							}
						}
				}
				for(Book b:bookList) {
					if(!(b.isCanTake())) {
						returnBook(b, "в читальный зал ");
						bookList.remove(b);
						System.out.println("Читатель " + readerID + " покинул библиотеку");
					}
			}
					for(Book b:bookList) {
							if(b.isCanTake()) {
								sleep(random.nextInt(400));
								if(random.nextBoolean()) {
									returnBook(b, "домой ");
									bookList.remove(b);
								}
							} 
					}
					if(bookList != null) {
						for(Book b:bookList) {
							returnBook(b, "домой ");
							bookList.remove(b);
						}
					}
			} catch (InterruptedException e) {
				 e.printStackTrace();
			}
		}
		
		System.out.println("Читатель " + readerID + " покинул библиотеку");
		
	}
	
	private void returnBook(Book b, String message) {
		lock.lock();
		lib.getLibrary().put(b.getID(), true);
		System.out.println("Читатель " + readerID + 
					       " сдал книгу, которую брал " + message
					       + b.getName() + " " + b.getAuthor());
		lock.unlock();
	}
	

}
