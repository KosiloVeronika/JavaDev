package com.epam.multithreading.entity;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Random;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;


public class Reader extends Thread {
	
	private int readerID;
	private Library lib;
	private Lock lock = new ReentrantLock();
	private ArrayList<Book> bookList;
	private Integer[] books;
	
	public Reader(Library lib, int readerID) {
		this.lib = lib;
		this.readerID =  readerID;
		bookList = new ArrayList<Book>();
	}
	
	
	@Override
	public void run() {
		books = null;
		Random random = new Random();
		HashSet<Integer> bookID = new HashSet<Integer>();
		int bookCount = new Random().nextInt(5);
		if (bookCount > 0) {
			for(int k = 0; k < bookCount; k++) {
				bookID.add(random.nextInt(lib.getLibrary().size()));
			}
		}
		bookID.toArray(books);
		for(int i = 0; i < books.length; i++) {
			if (lib.getLibrary().get(books[i])) {
				lock.lock();
				bookList.add(lib.bookList.get(books[i]));
				System.out.println("Читатель {1} взял книгу {2}", readerID, lib.bookList.get(books[i]).getName());
				lib.getLibrary().put(books[i], false);
				lock.unlock();
			}
		}
		
		
		
	}
	
	private void chooseBook() {
		
	}
	
	private boolean isAvalible(Book book) {
		boolean result = false;
		if(lib.getLibrary().get(book) && book.isCanTake()) {
			result = true;
		}
		return result;
	}
	

}
