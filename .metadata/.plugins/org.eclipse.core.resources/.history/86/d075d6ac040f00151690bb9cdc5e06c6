---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---REVIVE TEXT FROM TREE---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---DELETE WORD WITH 6 LETTERS---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the  to decrease the bicycle's speed only if the bicycle is already 
in . One possible implementation of the applyBrakes  could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in ), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing  are optional, provided that the "then"  contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the  is a  of personal taste. Omitting them can make the code 
more brittle. If a  statement is later added to the "then" , a  mistake would 
be forgetting to add the newly required . The compiler  catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if"  
evaluates to false. You could use an if-then-else statement in the applyBrakes  to 
take some action if the  are applied when the bicycle is not in . In this case, the 
action is to  print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    
Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---SORT WORDS---

A,
B,Bicycle,
C,
Deciding,
For,
However,
If,If,IfElseDemo,In,In,It,
Omitting,One,
Statement,Statement,Statements,
The,The,The,The,The,The,The,The,
You,You,
a,a,a,a,a,a,a,a,a,a,a,a,above,above,action,action,add,added,addition,all,allow,already,already,an,an,an,an,and,and,and,and,and,applied,applyBrakes,applyBrakes,appropriate,are,are,are,are,as,assigns,
based,basic,be,be,bicycle,bicycle,bicycle,bicycle,bicycle,braces,braces,braces,brakes,brakes,brittle,
can,can,cannot,case,catch,certain,class,clause,clause,clause,closing,code,code,common,compiler,compound,condition,conditions,contains,control,control,could,could,could,
decrease,
end,error,error,evaluated,evaluates,evaluates,evaluates,example,execute,executed,execution,expression,
false,false,flow,following,follows,for,for,forgetting,from,
get,grade,grade,
has,have,
if,if,if,if,implementation,in,in,in,in,in,is,is,is,is,is,is,is,is,is,
jumps,just,
later,ll,
make,matter,may,meaning,message,method,method,mistake,more,more,most,motion,motion,motion,
newly,not,not,not,noticed,
of,of,of,of,of,of,of,of,of,of,of,omit,on,on,once,one,one,only,only,only,opening,optional,or,or,output,
particular,path,personal,possible,print,program,program,program,provided,provides,
remaining,required,results,
s,satisfied,satisfy,score,score,score,second,secondary,section,simply,so,some,sort,speed,statement,statement,statement,statement,statement,statement,statement,statements,statements,stating,stopped,
take,taste,tells,test,test,test,testscore,than,that,that,that,that,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,the,them,then,then,this,this,this,to,to,to,to,to,to,to,to,to,to,to,true,
use,
value,value,
when,when,when,would,wrong,
you,

---SORT SENTENSES---

1.1.  The if-then Statement 
1.2.  The if-then-else Statement 
1.1.  The if-then Statement 
1.2.  The if-then-else Statement 
1.  The if-then and if-then-else Statements 
The output from the program is: 
    
Omitting them can make the code 
more brittle. One possible implementation of the applyBrakes method could be as follows: 
The if-then statement is the most basic of all the control flow statements. Deciding when to omit the braces is a matter of personal taste. The if-then statement is the most basic of all the control flow statements. Deciding when to omit the braces is a matter of personal taste. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
It tells your program 
to execute a certain section of code only if a particular test evaluates to true. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
It tells your program 
to execute a certain section of code only if a particular test evaluates to true. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 


