package com.epam.parcerapp.parse;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.epam.parcerapp.entity.Component;
import com.epam.parcerapp.entity.Composite;
import com.epam.parcerapp.entity.CompositeType;
import com.epam.parcerapp.entity.Leaf;

public abstract class Parser {
	
	
	public static void parseManage(String text, Composite composite) throws ParserException {
		switch(composite.getType()) {
		case TEXT:
			Parser.parse(text, "text", composite);
			break;
		case SENTENCE:
			break;
		default:
		}
	}
	
	public static void parse(String text, String type, Composite father) throws ParserException {
		
		Properties prop = new Properties();
		String propFileName = "regex.properties";
		String outputText = "";
		int currentStep = 0;
		int firstStep = 0;
		int lastStep = 0;
		String parametr = new String();
		String typeOfObject;
 
		FileInputStream inputStream;
		try {
			inputStream = new FileInputStream(propFileName);
		} catch (FileNotFoundException e) {
			throw new ParserException("Problem with property file", e);
		}
 
		try {
			prop.load(inputStream);
		} catch (IOException e) {
			throw new ParserException("Problem with property file", e);
		}
		String regEx = prop.getProperty(type);
		typeOfObject = prop.getProperty(parametr.format("%sType",type));
		Pattern pattern = Pattern.compile(regEx);
		Matcher matcher = pattern.matcher(text);
		while(matcher.find(lastStep)) {
			currentStep = matcher.start();
			if(lastStep - currentStep != 0) {
				outputText = text.substring(currentStep, lastStep);
				createComponent(outputText, father, typeOfObject, type);
			}
		}
		
		
	}

	private static void createComponent(String outputText, Composite father,
			String typeOfObject, String type) throws ParserException {
		switch (typeOfObject) {
		case "leaf":
			Component leaf = new Leaf(type, outputText);
			father.add(leaf);
			break;
		case "composite":
			Composite composite = new Composite(CompositeType.SENTENCE);
			parseManage(outputText, composite);
			father.add(composite);
			break;
		default: 
			throw new ParserException("this element type can not be recognized");
		}
		
	}

	
}
