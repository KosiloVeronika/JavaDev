package com.epam.newyeargift.dao;

import java.awt.print.Book;
import java.util.ArrayList;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;

import com.epam.newyeargift.entity.Candy;
import com.epam.newyeargift.entity.GiftBox;

public class StaxParser implements DataAccessDao {
	private GiftBox library;
    private Candy currentBook;
    private ArrayList<Candy> books;
    
	@Override
	public GiftBox getGiftFromSource(Object... args) throws DaoException {
		// TODO Auto-generated method stub
		return null;
	}
	
	private Library parsing(XMLStreamReader reader) throws XMLStreamException {
        String name;
        while (reader.hasNext()) {
            int type = reader.next();
            switch (type) {
                case XMLStreamConstants.START_ELEMENT:
                    name = reader.getLocalName();
                    switch (CandiesTagsEnum.valueOf(name.toUpperCase())) {
                        case BOX:
                            library = new GiftBox();
                            books = (ArrayList<Candy>) library.getBook();
                            break;
                        case CHOCOLATE:
                            currentBook = new Chocolate();
                            currentBook.setID(reader.getAttributeValue(0));
                            currentBook.setBookName(reader.getAttributeValue(1));
                            break;
                        case CARAMEL:
                            currentBook = new Caramel();
                            currentBook.setID(reader.getAttributeValue(0));
                            currentBook.setBookName(reader.getAttributeValue(1));
                            break;
                        case JELLY:
                            currentBook = new Jelly();
                            currentBook.setID(reader.getAttributeValue(0));
                            currentBook.setBookName(reader.getAttributeValue(1));
                            break;
                        default:
                            writeBookFeature(reader);
                            break;
                    }
                    break;

                case XMLStreamConstants.END_ELEMENT:
                    name = reader.getLocalName();
                    switch (CandiesTagsEnum.valueOf(name.toUpperCase())) {
                        case LIBRARY:
                            return library;
                        case BOOK:
                            books.add(currentBook);
                            break;
                    }
                    break;
            }
        }
        return null;
    }

    private void writeBookFeature(XMLStreamReader reader) throws XMLStreamException {
        switch (CandiesTagsEnum.valueOf(reader.getLocalName().toUpperCase())) {
            case WRITER:
                currentBook.setWriter(reader.getElementText());
                break;
            case PAPERBACK:
                currentBook.setPaperback(reader.getElementText());
                break;
            case YEAR:
                currentBook.setYear(Integer.parseInt(reader.getElementText()));
                break;
            case PAGE:
                currentBook.setPage(Integer.parseInt(reader.getElementText()));
                break;
        }

    }

    enum CandiesTagsEnum {
        NAME("name"), 
        WEIGHT("weight"), 
        SHUGAR_AMOUNT("shugar-amount"), 
        COLOR("color"), 
        TYPE_OF_CARAMEL("type-of-caramel"),
        TYPE_OF_CHOCOLATE("type-of-chocolate"),
        FILLING("filling"),
        TASTE("taste");
        
        private String value;
        
        private CandiesTagsEnum(String value) {
        	this.value = value;
        }
        
        public String getValue() {
        	return value;
        }

}
